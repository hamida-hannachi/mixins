//? MIXINS
//? MIXIN POUR RESPONSIVE
//créer une Map SCSS pour stocker les valeurs de points d'arrêt
$breakpoints: (
    sm: ( min: 576px, max: 575.98px ),
    md: ( min: 768px, max: 767.98px ),
    lg: ( min: 992px, max: 991.98px ),
    xl: ( min: 1200px,max: 1199.98px),
   xxl: ( min: 1400px,max: 1399.98px)
);
//écrire le mixin qui utilise ces points d'arrêt pour produire les requêtes média CSS souhaitées
//Il recevra deux arguments :
//Le point d'arrêt . Il peut s'agir de l'une des valeurs prédéfinies sm, md, lg, xl,xxl ou d'une valeur personnalisée (par exemple 1100 px ou 480 px ).
//La direction , qui détermine si vous souhaitez monter ou descendre, selon que vous écrivez des styles à appliquer sur des écrans plus petits ou plus grands. Elle peut être min ou max (la valeur par défaut est min ).
@mixin breakpoint($breakpoint, $direction: min) {
    
    //vérifier si le point d'arrêt fourni existe dans notre Map de points d'arrêt
    @if map-has-key($breakpoints, $breakpoint) { 
        $breakpoint-values: map-get($breakpoints, $breakpoint);
        $breakpoint-min: map-get($breakpoint-values, min);
        $breakpoint-max: map-get($breakpoint-values, max);

        //vérifiez si nous écrivons des styles pour des écrans plus grands ou plus petits
        @if $direction == min {
            @media (min-width: $breakpoint-min) {
                @content;
            }
        }

        @else {
            @media (max-width: $breakpoint-max) {
                @content;
            }
        }
    
    // utiliser la valeur personnalisée si le point d'arrêt ne fait pas partie de la liste prédéfinie
    } @else {
        
        @if $direction == min {
            @media (min-width: $breakpoint) {
                @content;
            }
        }

        @else {
            @media (max-width: $breakpoint) {
                @content;
            }
        }
    }
}


//? MIXIN POUR GRID
//utilise-le comme ça
//Si vous ne voulez que des lignes
//@include grid(repeat(2, 1fr));
//Si vous voulez des lignes et des colonnes:
//@include grid(repeat(2, 1fr), repeat(3, 1fr));
//Si vous voulez des colonnes mais pas de lignes, il en va de même avec l'espace, l'espace-ligne ou l'espace-colonne.
//@include grid($columns: repeat(3, 1fr));
@mixin grid($rows: null, $columns: null, $gap: null, $row-gap: null, $column-gap: null) {
    display: grid;
    gap: $gap;
    row-gap: $row-gap;
    column-gap: $column-gap;
    grid-template-rows: $rows;
    grid-template-columns: $columns;
  }


//? MIXIN convertir les px en rem
//appel exemple: padding: rem-calc(10)  rem-calc(20) ;
//fonction trmi-unite pour supprimé l'unité
// exemple: $base-font-size:16px
@function trim-unite ($value){
    @return $value / ($value * 0 + 1);

}
@function rem-calc($value) {
    @return $value / trim-unite($base-font-size) * 1rem;
}

//? MIXIN prefixe qui ajoute les préfixes de navigateurs
//appel exemple:  @include prefexers (box-sizing,border-box, webkit moz ); 
@mixin prefexers ($propriete,$values, $navigators:()){
@each $navigator in $navigators {
    #{'-'+$navigator+'-'+ $propriete} :  $values;    
    }
    #{$propriete} :  $values;
}

//? CSS utiles
*, ::before, ::after {
    @include prefexers (box-sizing,border-box, webkit moz);
   
}

//? FONT FAMILY DU SITE
$base_font_family: "Helvetica Neue", Helvetica, Arial;

//? COLORS

$primary_color: #333;
$secondary_color: #f4f4f4;
$tertiary_color: #f9f9f9;
$quaternary_color: #f2f2f2;
$light_gray: #e6e6e6;

//? BORDERS


//? GRID


//? HEADER


//? MAIN
/*******START ANIMATION SUR LES ITEMS MENU ON HOVER *******/  
ul.menupage{
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    
    li{
      list-style: none;
      padding: 10px 20px;
      a{
        text-decoration: none;
        text-transform: uppercase;
        font-size: 1.3em;
        color: #262626;
        position: relative;
        
        &:before, &:after{
          content: '';
          width: 0;
          height: 3px;
          position: absolute;
          top: 120%;
          transition: .5s;
          mix-blend-mode: multiply;
        }
        
        &:before{
          left: 0;
          background: #00bcd4;
        }
        &:after{
          right: 0;
          background: #f0f;
        }
      
      }
      &:hover a:before{
        width: 50%;
        transform: translate(100%);
      }
      
      &:hover a:after{
        width: 50%;
        transform: translate(-100%);
      }
    }
  }
  

  

/*******END ANIMATION SUR LES ITEMS MENU ON HOVER *******/  
//? CARDS


//? BUTTONS
a{
    display: inline-block;
    position: relative;
    outline: none !important;
    text-decoration: none;
    padding: .7rem 1.4rem;
    color: #fb9039;
    border: 1px solid #fb9039;
    background-color: transparent;
    z-index: 1;
    border-radius: 0;
    overflow: hidden;
    border-radius: 10rem;
}
a:hover {
    color: #fff;
    background-color: transparent;
    border-color: #fb9039;
}
a::after {
    display: inline-block !important;
    content: "";
    position: absolute;
    left: 0;
    top: 0;
    height: 0%;
    width: 100%;
    background: #fb9039;
    z-index: -1;
    transition: all .3sease-in-out;
}
a:hover::after {
    height: 100%;
}
//? MENU


//? FOOTER




